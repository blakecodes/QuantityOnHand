@page "/weather"
@using System.Text.Json.Serialization

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{        
    <MudDataGrid Items="@Elements.Take(4)">
        <Columns>
            <PropertyColumn Property="x => x.Number" Title="Nr" />
            <PropertyColumn Property="x => x.Sign" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Position" />
            <PropertyColumn Property="x => x.Molar" Title="Molar mass" />
        </Columns>
    </MudDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    public class Element
    {
        public string Group { get; set; }
        public int Position { get; set; }
        public string Name { get; set; }
        public int Number { get; set; }

        [JsonPropertyName("small")]
        public string Sign { get; set; }
        public double Molar { get; set; }
        public IList<int> Electrons { get; set; }

        public override string ToString()
        {
            return $"{Sign} - {Name}";
        }
    }

    private IEnumerable<Element> Elements = new List<Element>
    {
        new Element { Number = 1, Sign = "H", Name = "Hydrogen", Position = 1, Molar = 1.008 },
        new Element { Number = 2, Sign = "He", Name = "Helium", Position = 18, Molar = 4.0026 },
        new Element { Number = 3, Sign = "Li", Name = "Lithium", Position = 1, Molar = 6.94 },
        new Element { Number = 4, Sign = "Be", Name = "Beryllium", Position = 2, Molar = 9.0122 }
    };

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}